name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: 20

jobs:
  # Code Quality & Security
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type check
        run: npx tsc --noEmit

      - name: Lint code
        run: npm run lint --if-present

      - name: Security audit  
        run: npm audit --audit-level=high || echo "Audit completed with warnings"

  # Unit & Integration Tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:run -- src/test/unit/storyEngine.test.ts src/test/unit/StoryRenderer.test.tsx src/test/unit/simpleState.test.tsx

      - name: Run integration tests
        run: npm run test:run -- src/test/integration

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # End-to-End Tests
  e2e:
    name: E2E Tests  
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install ${{ matrix.browser }}

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npm run test:e2e -- --project=${{ matrix.browser }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 7

  # Build & Docker
  build:
    name: Build & Docker
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Analyze bundle size
        run: |
          npx vite-bundle-analyzer dist --analyze
          echo "Bundle analysis complete"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          tags: storyforge:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Performance Testing
  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Serve application
        run: |
          npm run preview &
          sleep 5

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Docker Testing
  docker-test:
    name: Docker Test Environment
    runs-on: ubuntu-latest
    needs: [quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.test
          tags: storyforge-test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run tests in Docker
        run: |
          docker run --rm storyforge-test:latest npm run test:run -- src/test/unit/storyEngine.test.ts src/test/unit/StoryRenderer.test.tsx src/test/unit/simpleState.test.tsx

  # CI Status Check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quality, test, e2e, build]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          if [ "${{ needs.quality.result }}" == "success" ] && \
             [ "${{ needs.test.result }}" == "success" ] && \
             [ "${{ needs.e2e.result }}" == "success" ] && \
             [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ All CI checks passed"
            exit 0
          else
            echo "❌ CI checks failed"
            exit 1
          fi